using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;

namespace BankID
{
    /// <summary>
    /// Implementation reference: https://www.bankid.com/assets/bankid/rp/bankid-relying-party-guidelines-v3.5.pdf
    /// </summary>
    public static class QRHelper
    {
        /// <summary>
        /// Get static token.
        /// </summary>
        /// <param name="authStartToken">Recieved from /auth in the BankID process.</param>
        /// <returns></returns>
        public static string GetStaticQR(string authStartToken) => $"bankid:///?autostarttoken={authStartToken}";
        
        /// <summary>
        /// The QR code is generated by the RP every second using the pattern "bankid.qrStartToken.time.qrAuthCode"
        /// as input, where:
        ///   • bankid is a fixed prefix
        ///   • qrStartToken is from the auth or sign response
        ///   • time is the number of seconds since the result from auth or sign was returned
        /// qrAuthCode is computed as HMACSHA256(qrStartSecret, time) where
        ///   • time is the number of seconds since the response from auth or sign was returned
        ///   • qrStartSecret is from the auth or sign response.
        ///
        /// Necessary parameters are accuired from bankid /auth call.
        /// 
        /// </summary>
        /// <param name="qrStartToken"></param>
        /// <param name="qrStartSecret"></param>
        /// <param name="time">time = Math.Ceil(tStart - tNow)</param>
        /// <returns></returns>
        public static string GetAnimatedQR(string qrStartToken, string qrStartSecret, int time)
        {
            byte[] value = Encoding.UTF8.GetBytes(time.ToString());
            byte[] secret = Encoding.UTF8.GetBytes(qrStartSecret);

            HMACSHA256 hmac = new HMACSHA256(secret);
            var byteQRAuthCode = hmac.ComputeHash(value);

            // Tranform to hex format.
            var qrAuthCode = BitConverter.ToString(byteQRAuthCode)
                .Replace("-", "")
                .ToLower();

            return $"bankid.{qrStartToken}.{time}.{qrAuthCode}";
        }
    }
}
